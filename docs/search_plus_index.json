{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 RX-78 是一款 USB HID 设备，软件发送命令到设备后，设备将执行鼠标或键盘操作，可用于自动操作或使用 USB 接口操作其他机器。 具有如下特点： 无需安装驱动，即插即用 键盘支持全键盘、组合键操作，可以支持 6 + 8 个无冲突按键： 8 个控制按键：左/右Ctrl、左/右Shift、左/右Alt、左/右 Windows 6 个除了以上 8 个控制按键外的普通按键 支持修改厂商ID（vendor id）、产品ID（product id）、设备名 支持写入和验证数据 可配置鼠标为相对、绝对、相对+绝对三种模式中的一种 支持中英文输入 RX-78 分为单头和双头两种，都通过同一个接口库 RX-78.dll 进行操作。 双头设备 双头设备从主控机的 USB 接收的命令传给被控机，被控机通过 USB 执行键盘或鼠标操作。 可以使用 USB 延长线，将双头设备连接到主控机和被控机上。 主控机和被控机可以是同一台机器。 也可以将双头设备的被控端映射入虚拟机中，实现主机控制虚拟机。 单头设备 单头设备只使用一个 USB 接口，接收本机的命令后执行键盘或鼠标操作。 使用单头设备时，相当于将双头设备的两端都插到同一台机器上。 单头设备也可以将设备映射入虚拟机中，此时，控制程序也必须在虚拟机中。 三头设备 三头设备从主控机的 USB 接收的命令传给被控机，被控机通过 USB 执行键盘或鼠标操作。 与双头硬件不同的是，三头硬件将鼠标和键盘分开为两个单独的设备。 接口库 接口库是程序操作设备的编程接口，同时包装了很多常用的操作，包括：鼠标单击、双击、可配置的模拟鼠标移动操作、按键等，详见各 API 说明。 接口库是通过一个 x86 win32 dll 文件实现，同时支持单头设备以及双头设备。函数使用 stdcall 调用协议，目前只直接提供易语言模块和 VC++ 的动态链接库 lib，实际上任何支持调用 win32 dll 的语言都能开发，包括按键精灵、VB、VB.NET、C#、Delphi、Python、JAVA、按键精灵、TC 等。 "},"API.html":{"url":"API.html","title":"API","keywords":"","body":"API 目前只直接提供易语言模块和 VC++ 的动态链接库 lib，易语言使用中文名称，VC++ 使用英文名称，下面的描述中，将以英文名描述，并标注中文名。 VC++ 中几乎所有方法都是统一返回 enum class RX78::Result；易语言中几乎都是返回 整数型，其值必然是常量 #RX78结果_???。具体参见结果代码。 "},"API_control.html":{"url":"API_control.html","title":"控制 API","keywords":"","body":"控制 API RX78::Device::Open RX78设备.打开 打开设备，其他操作都需要打开成功后才能进行。所需信息的查看方法请看 设备信息的查看方法。 参数 注释 device_ID设备ID 形如 XXXX-XXXX-XXXX，包括横杠，不包括方括号，字母全部为大写。 target_resolution_x目标屏幕宽度 默认值为当前屏幕宽度。 target_resolution_y目标屏幕高度 默认值为当前屏幕高度。 device_type 设备类型 兼容旧版本硬件，新版本不填。可选值为： DeviceType::k1 #设备类型_1头（1 头）、DeviceType::k2 #设备类型_2头（2 头）、DeviceType::k3 #设备类型_3头（3 头）。 mouse_mode 鼠标模式 兼容旧版本硬件，新版本不填。可选值为：MouseMode::kRelative #鼠标模式_相对（3 头）、MouseMode::kBoth #鼠标模式_相对和绝对（1 头、2 头）。 RX78::Device::Close RX78设备.关闭 对象销毁时会自动调用此方法关闭设备。 RX78::Device::Restart RX78设备.重启 可在配置设备ID、厂商ID、产品ID后重启设备，以刷新信息。 成功后内部会调用 Close。 RX78::Device::RestartMouse RX78设备.重启鼠标 只有 3 头设备有效。 RX78::Device::RestartKeyboard RX78设备.重启键盘 只有 3 头设备有效。 RX78::Device::RestartMaster RX78设备.重启控制端 只有 2 头或 3 头设备有效。 RX78::Device::RestartWorker RX78设备.重启被控端 只有 2 头或 3 头设备有效。 "},"API_config.html":{"url":"API_config.html","title":"配置 API","keywords":"","body":"配置 API 配置 API 都需要重新插入设备或调用 RX78::Device::Restart RX78设备.重启 后生效。 RX78::Device::ConfigVendorID RX78设备.配置厂商ID 配置整个设备的厂商ID，2 头和 3 头设备将把把所有头都设置为相同的ID。 参数 注释 vendor_ID厂商ID 新的ID。 RX78::Device::ConfigMouseVendorID RX78设备.配置鼠标厂商ID 仅 3 头设备有效。 参数 注释 vendor_ID厂商ID 新的ID。 RX78::Device::ConfigKeyboardVendorID RX78设备.配置键盘厂商ID 仅 3 头设备有效。 参数 注释 vendor_ID厂商ID 新的ID。 RX78::Device::ConfigMasterVendorID RX78设备.配置控制端厂商ID 仅 2 头 和 3 头设备有效。 | 参数 | 注释 | | ------------------------------ | ---------- | | vendor_ID厂商ID | 新的ID。 | RX78::Device::ConfigWorkerVendorID RX78设备.配置被控端厂商ID 仅 2 头 和 3 头设备有效。 参数 注释 vendor_ID厂商ID 新的ID。 RX78::Device::ConfigProductID RX78设备.配置产品ID 配置整个设备的产品ID，2 头和 3 头设备将把把所有头都设置为相同的ID。 参数 注释 vendor_ID产品id 新的ID。 RX78::Device::ConfigMouseProductID RX78设备.配置鼠标产品ID 仅 3 头设备有效。 参数 注释 vendor_ID产品id 新的ID。 RX78::Device::ConfigKeyboardProductID RX78设备.配置键盘产品ID 仅 3 头设备有效。 参数 注释 vendor_ID产品id 新的ID。 RX78::Device::ConfigProductID RX78设备.配置控制端产品ID 仅 2 头 和 3 头设备有效。 参数 注释 vendor_ID产品id 新的ID。 RX78::Device::ConfigProductID RX78设备.配置被控端产品ID 仅 2 头 和 3 头设备有效。 参数 注释 vendor_ID产品id 新的ID。 RX78::Device::ConfigName RX78设备.配置名称 配置整个设备的名称，2 头和 3 头设备将把把所有头都设置为相同的ID。 参数 注释 device_name名称 新的设备名。名称长度要求大于 0 小于 29，一个中文符号也算一个长度。 RX78::Device::ConfigMouseName RX78设备.配置鼠标名称 仅 3 头设备有效。 参数 注释 device_name名称 新的设备名。名称长度要求大于 0 小于 29，一个中文符号也算一个长度。 RX78::Device::ConfigKeyboardName RX78设备.配置键盘名称 仅 3 头设备有效。 参数 注释 device_name名称 新的设备名。名称长度要求大于 0 小于 29，一个中文符号也算一个长度。 RX78::Device::ConfigMasterName RX78设备.配置控制端名称 仅 2 头 和 3 头设备有效。 参数 注释 device_name名称 新的设备名。名称长度要求大于 0 小于 29，一个中文符号也算一个长度。 RX78::Device::ConfigWorkerName RX78设备.配置被控端名称 仅 2 头 和 3 头设备有效。 参数 注释 device_name名称 新的设备名。名称长度要求大于 0 小于 29，一个中文符号也算一个长度。 "},"API_verify.html":{"url":"API_verify.html","title":"验证 API","keywords":"","body":"验证 API RX78::Device::ConfigData RX78设备.配置数据 将数据写入设备中，用于验证。 参数 注释 data数据 写入设备用于验证的数据。长度要求大于 0 小于 60。只能用于验证是否一致，不可读取。 RX78::Device::ConfigData RX78设备.验证数据 验证设备中的数据是否于传入数据相同。 参数 注释 data数据 用于验证的数据。长度要求大于 0 小于 60。 "},"API_keyboard.html":{"url":"API_keyboard.html","title":"键盘 API","keywords":"","body":"键盘 API 键盘 API 所使用的键码均为虚拟键码，VC++ 的键码常量在 enum class RX78::VirtualKeyCode 中，易语言为以 #Vk 开头的常量。 RX78::Device::KeydownRX78设备.按下 参数 注释 virtual_key_code虚拟键码 要按下的键的虚拟键码。 RX78::Device::KeyupRX78设备.弹起 参数 注释 virtual_key_code虚拟键码 要弹的键的虚拟键码。 RX78::Device::KeyPressRX78设备.击键 按下后弹起按键，若按下或弹起过程中失败，则提前返回。 参数 注释 virtual_key_code虚拟键码 要按下弹起的键的虚拟键码。 sleep_after_down_range按下后延时范围 按下键盘后随机延迟的范围，默认为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_down_range弹起后延时范围 弹起键盘后随机延迟的范围，默认为 { 150, 600 }，即大于等于 150 ms，小于等于 600 ms。 RX78::Device::GetKeyStateRX78设备.取键状态 该方法取得的按键状态时设备内记录的状态。 参数 注释 virtual_key_code虚拟键码 要取状态的键的虚拟键码。 is_downed是否按下 返回按键是否按下。 RX78::Device::ReleaseAllKeysRX78设备.释放所有键 弹起所有按键。如果出现按键异常，可以调用该方法恢复。 RX78::Device::GetLedStateRX78设备.取LED状态 参数 注释 button鼠标按键 VC++ 可选值为 enum Button，易语言可选值为：#鼠标左键、#鼠标右键、#鼠标中键。 is_downed是否按下 返回指定按键是否按下。 RX78::Device::GetButtonStateRX78设备.取鼠标按键状态 参数 注释 ledled 目标 LED，VC++ 可选值为 enum class RX78::Led，易语言为以 #Led 开头的常量。 is_lit是否亮着 返回 LED 是否亮着。 RX78::Device::TypeRX78设备.打字 参数 注释 str文本 要输入的文本，支持中英文。 sleep_after_down_range按下后延时范围 按下键盘后随机延迟的范围，默认为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_down_range弹起后延时范围 弹起键盘后随机延迟的范围，默认为 { 150, 600 }，即大于等于 150 ms，小于等于 600 ms。 RX78::Device::TypeWRX78设备.打字W 支持中英文。一些输入框使用 Type 乱码，尝试使用此方法。 参数 注释 str文本 要输入的文本，支持中英文。 sleep_after_down_range按下后延时范围 按下键盘后随机延迟的范围，默认为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_down_range弹起后延时范围 弹起键盘后随机延迟的范围，默认为 { 150, 600 }，即大于等于 150 ms，小于等于 600 ms。 "},"API_mouse.html":{"url":"API_mouse.html","title":"鼠标 API","keywords":"","body":"鼠标 API RX78::Device::ConfigMouseMode设备.配置鼠标模式 参数 注释 mode模式 可选值为：MouseMode::kRelative #鼠标模式_相对、MouseMode::kAbsolute#鼠标模式_绝对、MouseMode::kBoth #鼠标模式_相对和绝对 不同的鼠标模式，移动时的行为如下表。 MouseMode::kRelative #鼠标模式_相对 MouseMode::kAbsolute#鼠标模式_绝对 MouseMode::kBoth #鼠标模式_相对和绝对 RX78::Device::ToRelRX78设备.到相对坐标 硬件实现 通过绝对移动实现 硬件实现 RX78::Device::ToAbsRX78设备.到绝对坐标 通过到相对坐标实现 硬件实现 硬件实现 RX78::Device::MoveRelRX78设备.相对移动 通过到相对坐标实现 通过到绝对坐标实现 通过到相对坐标实现 RX78::Device::MoveAbsRX78设备.绝对移动 通过到相对坐标实现 通过到绝对坐标实现 通过到相对坐标实现 RX78::Device::GetMouseMode设备.取鼠标模式 参数 注释 mode模式 返回当前鼠标模式 RX78::Device::GetMouseMode设备.取坐标 返回记录的鼠标坐标，根据调用的移动函数记录，若光标被外部程序移动，则返回的不是真正的光标位置。 参数 注释 x x 坐标 y y 坐标 RX78::Device::LeftDownRX78设备.左键按下 RX78::Device::LeftUpRX78设备.左键弹起 RX78::Device::LeftClickRX78设备.左键单击 参数 注释 sleep_after_down_range按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_up_range弹起后延迟范围 默认值为 { 500, 900 }，即大于等于 500 ms，小于等于 900 ms。 RX78::Device::LeftDoubleClickRX78设备.左键双击 参数 注释 sleep_after_first_down_range第一次按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_first_up_range第一次弹起后延迟范围 默认值为 { 60, 110 }，即大于等于 60 ms，小于等于 110 ms。 sleep_after_second_down_range第二次按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_second_up_range第二次弹起后延迟范围 默认值为 { 500, 900 }，即大于等于 500 ms，小于等于 900 ms。 RX78::Device::RightDownRX78设备.右键按下 RX78::Device::RightUpRX78设备.右键弹起 RX78::Device::RightClickRX78设备.右键单击 参数 注释 sleep_after_down_range按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_up_range弹起后延迟范围 默认值为 { 500, 900 }，即大于等于 500 ms，小于等于 900 ms。 RX78::Device::RightDoubleClickRX78设备.右键双击 参数 注释 sleep_after_first_down_range第一次按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_first_up_range第一次弹起后延迟范围 默认值为 { 60, 110 }，即大于等于 60 ms，小于等于 110 ms。 sleep_after_second_down_range第二次按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_second_up_range第二次弹起后延迟范围 默认值为 { 500, 900 }，即大于等于 500 ms，小于等于 900 ms。 RX78::Device::MiddleDownRX78设备.中键按下 RX78::Device::MiddleUpRX78设备.中键弹起 RX78::Device::MiddleClickRX78设备.中键单击 参数 注释 sleep_after_down_range按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_up_range弹起后延迟范围 默认值为 { 500, 900 }，即大于等于 500 ms，小于等于 900 ms。 RX78::Device::MiddleDoubleClickRX78设备.中键双击 参数 注释 sleep_after_first_down_range第一次按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_first_up_range第一次弹起后延迟范围 默认值为 { 60, 110 }，即大于等于 60 ms，小于等于 110 ms。 sleep_after_second_down_range第二次按下后延迟范围 默认值为 { 50, 80 }，即大于等于 50 ms，小于等于 80 ms。 sleep_after_second_up_range第二次弹起后延迟范围 默认值为 { 500, 900 }，即大于等于 500 ms，小于等于 900 ms。 RX78::Device::ReleaseAllButtonRX78设备.释放所有鼠标按键 在出现鼠标按键出现异常时，可以调用该方法恢复。 RX78::Device::ScrollRX78设备.滚动 滚动鼠标滚轮。 参数 注释 value值 向上为正，向下为负。 RX78::Device::ToRelRX78设备.到相对坐标 将光标到置于当前坐标的位置 (x, y) 处，无移动轨迹。 参数 注释 x x 轴移动量 y y 轴移动量 RX78::Device::ToAbsRX78设备.到绝对坐标 将光标置于相对于坐标 (0, 0) 的位置 (x, y) 处，无移动轨迹。使用此方法前需要先设置目标机器分辨率，否则返回 RX78::Result::kInvalidResolutionValue或RX78结果_无效分辨率。 参数 注释 x x 坐标 y y 坐标 RX78::Device::MoveRelRX78设备.相对移动 使用数学方程模拟移动轨迹移动到相对坐标。 轨迹计算方程为 a1 sin(b1 v) + a2 sin(b2 v)，v 表示光标到目标的直线移动量。速度由三次贝塞尔曲线计算得到。 参数 注释 x x 轴移动量 y y 轴移动量 sample_rate采样比例 此系数 * 到目标的直线距离 = 用几个点模拟轨迹，默认为 0.2。 sleep延时 每个模拟点之间的延时，默认为 10。 a1 此值为随机范围，默认值为 { 1, 2 }，表示区间 [1, 2)。 b1 此值为随机范围，默认值为 { 0.001, 0.04 }，表示区间 [0.001, 0.04)。 a2 此值为随机范围，默认值为 { 0.5, 1.5 }，表示区间 [0.5, 1.5)。 b2 此值为随机范围，默认值为 { 0.001, 0.06 }，表示区间 [0.001, 0.06)。 p1 此值为随机范围，默认值为 { 0.001, 1 }，表示区间 [0.001, 1)。 p2 此值为随机范围，默认值为 { 0.001, 1 }，表示区间 [0.001, 1)。 RX78::Device::MoveAbsRX78设备.绝对移动 使用数学方程模拟移动轨迹移动到绝对坐标。 轨迹计算方程为 a1 sin(b1 v) + a2 sin(b2 v)，v 表示光标到目标的直线移动量。速度由三次贝塞尔曲线计算得到。 参数 注释 x x 轴移动量 y y 轴移动量 sample_rate采样比例 此系数 * 到目标的直线距离 = 用几个点模拟轨迹，默认为 0.2。 sleep延时 每个模拟点之间的延时，默认为 10。 a1 此值为随机范围，默认值为 { 1, 2 }，表示区间 [1, 2)。 b1 此值为随机范围，默认值为 { 0.001, 0.04 }，表示区间 [0.001, 0.04)。 a2 此值为随机范围，默认值为 { 0.5, 1.5 }，表示区间 [0.5, 1.5)。 b2 此值为随机范围，默认值为 { 0.001, 0.06 }，表示区间 [0.001, 0.06)。 p1 此值为随机范围，默认值为 { 0.001, 1 }，表示区间 [0.001, 1)。 p2 此值为随机范围，默认值为 { 0.001, 1 }，表示区间 [0.001, 1)。 RX78::Device::TraceRX78设备.沿轨迹移动 根据传入的轨迹数据进行移动，此方法为相对移动。 参数 注释 offsets轨迹数据 轨迹数据，易语言传递二维数组，VC++ 传递 vector，如：    { {0, 1}, {1, 3}, {2, 3} }。 sleep延时 每个点之间的延时。 RX78::Device::Trace 重载版本。根据传入的轨迹数据进行移动，此方法为相对移动。 参数 注释 offsets 轨迹数据，VC++ 传递 int16_t[][2]，如：    { {0, 1}, {1, 3}, {2, 3} }。 size 轨迹数据大小，如：{ {0, 1}, {1, 3}, {2, 3} }，大小为 3。 sleep 每个点之间的延时。 "},"API_others.html":{"url":"API_others.html","title":"其他 API","keywords":"","body":"其他 API RX78::Device::GetDeviceTypeRX78设备.取设备类型 参数 注释 type 可能的值为：DeviceType::k1#设备类型_1头、DeviceType::k2#设备类型_2头、DeviceType::k3#设备类型_3头 RX78::Device::SetTimeout RX78设备.设置超时 设置通讯超时，当发送命令到设备后，等待时间超过此时间时，返回 RX78::Result::Timeout 或 #RX78结果_超时。 参数 注释 timeout超时值 超时值 RX78::GetSystemError RX78设备.取系统错误 一般在 windows API 失败后应用 GetLastError 取错误代码，但易语言等内部函数会导致最后的错误代码发生改变，所以接口库会在 API 错误后将错误代码保存，而后用此 API 取出。 RX78::ResultToStr RX78结果到文本 将返回结果代码转为字符串 参数 注释 result结果 结果 "},"API_result.html":{"url":"API_result.html","title":"结果代码","keywords":"","body":"结果代码 名称 注释 RX78::Result::kSuccess#RX78结果_成功 操作成功。 RX78::Result::kSystemError#RX78结果_系统错误 返回此值时，易语言使用 RX78设备.取最后错误() VC++ 使用 GetLastError() 取系统错误码，判断错误。 RX78::Result::kDeviceNotFound#RX78结果_未找到设备 请检查设备是否已经插入以及设备 id 是否正确。 RX78::Result::kInvalidResolutionValue#RX78结果_无效分辨率 请确认设置的分辨率是否大于 0。 RX78::Result::kTimeout#RX78结果_超时 请确定双头设备两端都已经正确插入，并确认超时值是否过小。 kInvalidTimeoutValuet#RX78结果_无效超时值 请确认设置的超时值是否大于 0。 kCursorUnreset#RX78结果_未重置光标 需要先调用一次调用重置光标。 RX78::Result::kInvalidKeyValue#RX78结果_无效键码 按键代码无效，关于键码请查看 按键代码。 RX78::Result::kKeyFull#RX78结果_按键已满 最多支持 6个普通按键 + 8个控制按键无冲突按键。 RX78::Result::kNotModified#RX78结果_未修改 若指定的鼠标按键或键盘按键已经按下，再要求设备按下时返回此值。 RX78::Result::kInvalidSize#RX78结果_无效大小 配置数据或名称时数据大小超出规定的值，设备名称长度必须大于 0， 最多 29 个字符（中文字符算一个字符），验证数据长度必须大于0，最多 60 个字节。 RX78::Result::kInvalidPkgType#RX78结果_无效包类型 一般为接口库内部错误。 RX78::Result::kConfigError#RX78结果_配置失败 配置过程中发生硬件错误等。 RX78::Result::kVerifyFailed#RX78结果_验证失败 验证数据不匹配。 RX78::Result::kInvalidResult#RX78结果_无效结果 一般为接口库或硬件错误。 "},"API_keycode.html":{"url":"API_keycode.html","title":"按键代码","keywords":"","body":"按键代码 接口库提供的所有接口所需要的键码都是虚拟键码，VC++ 中可以使用库中的 enum class VirtualKeyCode，易语言可以使用易语言提供的键码常量或模块中以 #Vk 开头的常量。 在下面的方框中按下按键，可以查询对应的键码常量名。 "},"QNA.html":{"url":"QNA.html","title":"常见问题","keywords":"","body":"常见问题 如何查看设备名和设备 id Windows 10 用户 Windows 7 用户 "},"license.html":{"url":"license.html","title":"版权声明","keywords":"","body":"版权声明 这个图标的作者是 sliceberry，作者网站是 http://sliceberry.com/。许可协议为：Creative Commons Attribution-Share Alike 3.0 Unported License。 因在此对原作品做了修改，故所有基于此作品的图片均以相同方式共享。 "}}